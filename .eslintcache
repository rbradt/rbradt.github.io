[{"D:\\myWebsite\\rbradt.github.io\\src\\index.js":"1","D:\\myWebsite\\rbradt.github.io\\src\\App.js":"2","D:\\myWebsite\\rbradt.github.io\\src\\reportWebVitals.js":"3","D:\\myWebsite\\rbradt.github.io\\src\\UI Controllers\\GameSelect.js":"4","D:\\myWebsite\\rbradt.github.io\\src\\UI Controllers\\TTTGameUI.js":"5"},{"size":504,"mtime":1611345889824,"results":"6","hashOfConfig":"7"},{"size":2556,"mtime":1611677514728,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3623,"mtime":1611931085535,"results":"10","hashOfConfig":"7"},{"size":5575,"mtime":1611679944819,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1fbhn1k",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"D:\\myWebsite\\rbradt.github.io\\src\\index.js",[],["24","25"],"D:\\myWebsite\\rbradt.github.io\\src\\App.js",[],"D:\\myWebsite\\rbradt.github.io\\src\\reportWebVitals.js",[],"D:\\myWebsite\\rbradt.github.io\\src\\UI Controllers\\GameSelect.js",["26","27","28","29","30","31","32","33","34","35","36","37"],"D:\\myWebsite\\rbradt.github.io\\src\\UI Controllers\\TTTGameUI.js",["38","39","40"],"import {Component} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\r\nimport {faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport '../CSS/ttt_board.css';\r\n\r\n// Board Controller\r\nclass TTTCellUI extends Component {\r\n\trender() {\r\n\t\treturn (<button className=\"ttt_board_cell\" onClick={this.props.onClick} onMouseOver={this.props.hover} onMouseOut={this.props.nohover} style={this.props.style}> {this.props.value} </button>);\r\n\t}\r\n}\r\n\r\nclass TTTBoardUI extends Component {\r\n\tcreateCell(i) {\r\n\t\tconst newGameMsg = \"TICTACTOE\";\r\n\t\tlet value;\r\n\t\tlet style;\r\n\r\n\t\t\r\n\t\tif(this.props.isHovered[i]) {\r\n\t\t\tvalue = this.props.turn%2===0? 'X':'O';\r\n\t\t\tstyle = {color: \"#0f1011\"};\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue = this.props.isNewGame? newGameMsg[i]: this.props.board[i];\r\n\t\t\tstyle = this.props.board[i]==='X' || this.props.isNewGame && Math.floor(i/3) === 1 ? {color: \"#a55463\", textShadow: \"0px 0px 5px #a55463\"}: {color: \"#61dafb\", textShadow: \"0px 0px 5px #ccccff\"}\r\n\t\t}\r\n\r\n\t\treturn (<TTTCellUI value={value}\r\n\t\t\t\t\t\t   onClick={() => this.props.onClick(i)}\r\n\t\t\t\t\t\t   hover={() => this.props.onMouseIn(i)}\r\n\t\t\t\t\t\t   nohover={() => this.props.onMouseOut(i)}\r\n\t\t\t\t\t\t   style={style}/>);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"ttt_board\">\r\n\t\t\t\t<div className=\"ttt_row\">\r\n\t\t\t\t\t{this.createCell(0)}\r\n\t\t\t\t\t{this.createCell(1)}\r\n\t\t\t\t\t{this.createCell(2)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"ttt_row\">\r\n\t\t\t\t\t{this.createCell(3)}\r\n\t\t\t\t\t{this.createCell(4)}\r\n\t\t\t\t\t{this.createCell(5)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"ttt_row\">\r\n\t\t\t\t\t{this.createCell(6)}\r\n\t\t\t\t\t{this.createCell(7)}\r\n\t\t\t\t\t{this.createCell(8)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass TTTGameUI extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tvar _this = this;\r\n\t\tthis.state = {\r\n\t\t\tmoves: [{board: Array(9).fill(null)}],\r\n\t\t\tisHovered: Array(9).fill(false),\r\n\t\t\tnewGame: true,\r\n\t\t\tturn: 0\r\n\t\t};\r\n\t\tlibrary.add(faUndo);\r\n\t\t// this.props.observers // list of observers to be notified of user input on board\r\n\t\t// this.props.gametype // specifies game type (0 = local, 1 = vsAI, 2 = vsPlayer)\r\n\t\t// this.props.player // specifies player's turn (X or O)\r\n\t}\r\n\t\r\n\tonClick(i) {\r\n\t\tif(this.props.gametype && this.state.turn%2 !== this.props.player)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tconst moves = this.state.moves.slice(0, this.state.turn + 1);\r\n\t\tconst active = moves[this.state.turn];\r\n\t\tconst board = active.board.slice();\r\n\t\tconst isHovered = this.state.isHovered.slice();\r\n\t\t\r\n\t\t// if board space is occupied or game is over -> exit method\r\n\t\tif(board[i] /*|| evaluateBoard(board)*/)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// update ui\r\n\t\tisHovered[i] = false;\r\n\t\tboard[i] = this.state.turn%2 === 0? 'X': 'O';\r\n\t\tthis.setState({\r\n\t\t  moves: moves.concat([{board: board}]),\r\n\t\t  isHovered: isHovered,\r\n\t\t  turn: moves.length,\r\n\t\t  newGame: false\r\n\t\t});\r\n\t\t\r\n\t\t/*this.notifyObservers(board);*/\r\n\t}\r\n\t\r\n\tonMouseIn(i) {\r\n\t\tif(this.props.gametype && this.state.turn%2 !== this.props.player)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tconst active = this.state.moves.slice(0, this.state.turn + 1)[this.state.turn];\r\n\t\tconst board = active.board.slice();\r\n\t\tconst isHovered = this.state.isHovered.slice();\r\n\t\t\r\n\t\t// if board space is occupied or game is over -> exit method\r\n\t\tif(board[i] /*|| evaluateBoard(board)*/)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// update ui\r\n\t\tisHovered[i] = true;\r\n\t\tthis.setState({isHovered: isHovered});\r\n\t}\r\n\t\r\n\tonMouseOut(i) {\r\n\t\tif(this.props.gametype && this.state.turn%2 !== this.props.player)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tconst active = this.state.moves.slice(0, this.state.turn + 1)[this.state.turn];\r\n\t\tconst board = active.board.slice();\r\n\t\tconst isHovered = this.state.isHovered.slice();\r\n\t\t\r\n\t\t// if board space is occupied or game is over -> exit method\r\n\t\tif(board[i] /*|| evaluateBoard(board)*/)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// update ui\r\n\t\tisHovered[i] = false;\r\n\t\tthis.setState({isHovered: isHovered});\r\n\t}\r\n\t\r\n\tgoTo(move) {\r\n\t\tif(move >= 0)\r\n\t\t\tthis.setState({turn: move});\r\n\t}\r\n\t\r\n\t// ReactDOM.render() will return this object, but the value of this will be unknown\r\n\t//Observe TTT board model\r\n\tupdate(model) {\r\n\t\tconst newTurn = model.getTurn();\r\n\t\tconst newBoard = model.toOutputBoard();\r\n\t\tconst moves = this.state.moves.slice(0, newTurn + 1);\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tmoves: moves.concat([{board: newBoard}]),\r\n\t\t\tturn: newTurn\r\n\t\t});\r\n\t}\r\n\t\r\n\t// Notify model of user input\r\n\tnotifyObservers(activeBoard) {\r\n\t\tfor(var i = 0; i < this.props.observers.length; i++)\r\n\t\t\tthis.props.observers[i].update(/*new model(activeBoard)*/);\r\n\t}\r\n\r\n\tundoButton(turn) {\r\n\t\tlet newTurn = turn - (this.props.gametype + 1);\r\n\t\tif(this.props.gametype !== 2) \r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"ttt_undo\" onClick={() => this.goTo(newTurn)}>\r\n\t\t\t\t\t<div>Undo</div>\r\n\t\t\t\t\t<div className=\"\"><FontAwesomeIcon icon='undo'/></div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst moves = this.state.moves;\r\n\t\tconst turn = this.state.turn;\r\n\t\tconst current = moves[turn];\r\n\t\tconst hovered = this.state.isHovered;\r\n\t\tconst newGame = this.state.newGame;\r\n\t\t\r\n\t\tlet info = 'X Wins!';\r\n\t\t/*\r\n\t\tif(evaluateBoard(current.board) !== null) {\r\n\t\t\tinfo += (evaluateBoard(current.board) === 0)? 'X Wins': 'O Wins';\r\n\t\t}*/\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"ttt_game font unselectable\">\r\n\t\t\t\t<div>{info}</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<TTTBoardUI isNewGame={newGame} isHovered={hovered} turn={turn} board={current.board} onClick={i => this.onClick(i)} onMouseIn={i => this.onMouseIn(i)} onMouseOut={i => this.onMouseOut(i)}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.undoButton(turn)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport {TTTGameUI};\r\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":36,"column":9,"nodeType":"47","messageId":"48","endLine":42,"endColumn":10},{"ruleId":"49","severity":1,"message":"50","line":39,"column":17,"nodeType":"51","messageId":"52","endLine":39,"endColumn":23},{"ruleId":"53","severity":1,"message":"54","line":50,"column":19,"nodeType":"55","messageId":"56","endLine":50,"endColumn":21},{"ruleId":"53","severity":1,"message":"54","line":59,"column":38,"nodeType":"55","messageId":"56","endLine":59,"endColumn":40},{"ruleId":"53","severity":1,"message":"54","line":67,"column":46,"nodeType":"55","messageId":"56","endLine":67,"endColumn":48},{"ruleId":"53","severity":1,"message":"54","line":68,"column":38,"nodeType":"55","messageId":"56","endLine":68,"endColumn":40},{"ruleId":"57","severity":1,"message":"58","line":74,"column":45,"nodeType":"59","messageId":"60","endLine":74,"endColumn":47},{"ruleId":"57","severity":1,"message":"58","line":74,"column":69,"nodeType":"59","messageId":"60","endLine":74,"endColumn":71},{"ruleId":"53","severity":1,"message":"54","line":74,"column":84,"nodeType":"55","messageId":"56","endLine":74,"endColumn":86},{"ruleId":"53","severity":1,"message":"54","line":75,"column":40,"nodeType":"55","messageId":"56","endLine":75,"endColumn":42},{"ruleId":"53","severity":1,"message":"54","line":77,"column":40,"nodeType":"55","messageId":"56","endLine":77,"endColumn":42},{"ruleId":"53","severity":1,"message":"54","line":87,"column":37,"nodeType":"55","messageId":"56","endLine":87,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":27,"column":38,"nodeType":"59","messageId":"60","endLine":27,"endColumn":40},{"ruleId":"57","severity":1,"message":"58","line":27,"column":62,"nodeType":"59","messageId":"60","endLine":27,"endColumn":64},{"ruleId":"61","severity":1,"message":"62","line":63,"column":7,"nodeType":"63","messageId":"64","endLine":63,"endColumn":12},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-unused-vars","'_this' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]